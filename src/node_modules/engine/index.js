import {Container} from 'pixi.js';
import * as display from './display';
import raf from 'raf';
import * as resources from './resources';

let animationHandle = 0;

export function init({ init, update, stage } = {}) {
  if (typeof init !== 'function') {
    throw new Error('Param "init" must be a function');
  }
  if (typeof update !== 'function') {
    throw new Error('Param "update" must be a function');
  }
  if (!(stage instanceof Container)) {
    throw new Error('Param "stage" must inherit from PIXI.Container');
  }
  const tasks = [display.init(), resources.init()];
  return Promise.all(tasks).then(() => {
    init();
    let lastTime;
    raf((time) => {
      lastTime = time;
    });
    const renderer = display.renderer;
    const draw = (time) => {
      const delta = (time - lastTime)/1000;
      lastTime = time;
      update(delta);
      renderer.render(stage);
      animationHandle = raf(draw);
    };
    animationHandle = raf(draw);
  });
}

export function destroy() {
  raf.cancel(animationHandle);
  animationHandle = 0;
  const tasks = [display.destroy(), resources.destroy()];
  return Promise.all(tasks);
}
