import * as display from './display';
import * as input from './input';
import raf from 'raf';
import * as resources from './resources';
import Scene from './Scene';

let animationHandle = 0;
let scene = null;

export function launch(startScene) {
  if (!(startScene instanceof Scene)) {
    throw new Error('Param "scene" must inherit from engine/Scene');
  }
  scene = startScene;
  const tasks = [display.init(), input.init(), resources.init()];
  return Promise.all(tasks).then(() => {
    scene.init();
    let lastTime;
    const renderer = display.renderer;
    const draw = (time) => {
      const delta = (time - lastTime)/1000;
      lastTime = time;
      const next = scene.update(delta);
      input.postUpdate();
      if (next) {
        scene.dispose();
        next.init();
        scene = next;
      }
      renderer.backgroundColor = scene.backgroundColor;
      renderer.render(scene.container);
      animationHandle = raf(draw);
    };
    animationHandle = raf((time) => {
      lastTime = time;
      draw(time);
    });
  });
}

// TODO make this just set a flag to true and clean up after frame is done
export function exit() {
  scene.container.removeChildren();
  raf.cancel(animationHandle);
  animationHandle = 0;
  const tasks = [display.destroy(), input.destroy(), resources.destroy()];
  return Promise.all(tasks);
}
