import 'game/style.css'; // webpack magic
import {Point, SCALE_MODES, settings, Sprite} from 'pixi.js';
settings.SCALE_MODE = SCALE_MODES.NEAREST;

import * as engine from 'engine';
import * as display from 'engine/display';
import * as input from 'engine/input';
import * as resources from 'engine/resources';
import Scene from 'engine/Scene';

const GRAVITY = 800;
const RAVE_INTERVAL_MS = 1000 * 1;

class TestScene extends Scene {
  init() {
    this.raveHandle = window.setInterval(() => {
      this.randomizeBackgroundColor();
    }, RAVE_INTERVAL_MS);
    const bouncers = this.bouncers = [];
    for (let i = 0; i < 1000; i++) {
      const frames = Object.keys(resources.textureCache);
      const frame = frames[Math.floor(Math.random() * frames.length)];
      const bouncer = Sprite.fromFrame(frame);
      bouncer.tint = Math.floor(Math.random() * 0xFFFFFF);
      bouncer.rotation = Math.random() * Math.PI * 2;
      bouncer.anchor.set(0.5, 0.5);
      bouncer.scale.set(1 + Math.floor(Math.random() * 2));
      bouncer.position.x = Math.random() * display.width;
      bouncer.position.y = Math.random() * display.height;
      bouncer.velocity = new Point(
        Math.random() * GRAVITY - GRAVITY/2,
        Math.random() * GRAVITY - GRAVITY/2);
      bouncers.push(bouncer);
      this.stage.addChild(bouncer);
    }
    const sprite = this.sprite = Sprite.fromFrame('bunny');
    sprite.tint = 0x00FFFF;
    sprite.anchor.set(0.5, 0.5);
    sprite.position.set(display.width / 2, display.height / 2);
    sprite.scale.set(4);
    this.stage.addChild(sprite);
  }
  dispose() {
    window.clearInterval(this.raveHandle);
  }
  update(delta) {
    if (input.keyPressed('Space')) {
      this.randomizeBackgroundColor();
    }
    if (input.keyDown('KeyW')) {
      this.sprite.position.y -= 100 * delta;
    }
    if (input.keyDown('KeyA')) {
      this.sprite.position.x -= 100 * delta;
    }
    if (input.keyDown('KeyS')) {
      this.sprite.position.y += 100 * delta;
    }
    if (input.keyDown('KeyD')) {
      this.sprite.position.x += 100 * delta;
    }
    for (const bouncer of this.bouncers) {
      const {position, velocity} = bouncer;
      velocity.y += GRAVITY * delta / 2;
      position.x += velocity.x * delta;
      position.y += velocity.y * delta;
      velocity.y += GRAVITY * delta / 2;
      bouncer.rotation += velocity.x * delta / 100;
      if (position.x < 0 && velocity.x < 0) {
        position.x = 0;
        velocity.x *= -1;
      }
      if (position.x > display.width && velocity.x > 0) {
        position.x = display.width;
        velocity.x *= -1;
      }
      if (position.y < 0 && velocity.y < 0) {
        position.y = 0;
        velocity.y *= -1;
      }
      if (position.y > display.height && velocity.y > 0) {
        position.y = display.height;
        velocity.y *= -1;
      }
    }
  }
  randomizeBackgroundColor() {
    this.backgroundColor = Math.floor(Math.random() * 0xFFFFFF);
  }
}

engine.launch(new TestScene());
